<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Aishwarya/OneDrive/Desktop/SQL/demo.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="8407"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:mainCovidDeaths"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="CovidDeaths" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="92"/><column index="2" value="92"/><column index="3" value="95"/><column index="4" value="91"/><column index="5" value="103"/><column index="6" value="108"/><column index="7" value="104"/><column index="8" value="201"/><column index="9" value="119"/><column index="10" value="115"/><column index="11" value="212"/><column index="12" value="216"/><column index="13" value="212"/><column index="14" value="300"/><column index="15" value="227"/><column index="16" value="223"/><column index="17" value="300"/><column index="18" value="166"/><column index="19" value="116"/><column index="20" value="224"/><column index="21" value="133"/><column index="22" value="241"/><column index="23" value="213"/><column index="24" value="300"/><column index="25" value="230"/><column index="26" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*

Covid 19 Data Exploration 

    



Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types



*/

SELECT *
FROM CovidDeaths
WHERE continent is not null 
ORDER BY 3,4


--Select Data that we are going to be starting with


Select *
From CovidVaccinations
Where continent is not null 
order by 3,4


-- Select Data that we are going to be starting with

Select Location, date, total_cases, new_cases, total_deaths, population
From CovidDeaths
Where continent is not null 
order by 3, 4

--SELECT TOTAL CASES V/S TOTAL DEATHS 
--Shows what percentage of population got covid

SELECT location, date, total_cases, total_deaths,(total_deaths/total_cases)*100 AS Deathpercentage
FROM CovidDeaths
WHERE location like '%states%'

--Looking at total cases v/s population


SELECT location, date, location, total_cases, (total_cases/population)*100 AS Percentpopulationinfected
FROM CovidDeaths
WHERE location like '%states%'

--Looking at the countries with highest infection rate compared population
SELECT location, date, population, max(total_cases) AS Highestinfectioncount, max((total_cases/population))*100 AS Percentpopulationinfected
FROM CovidDeaths
--WHERE location like '%states%'
GROUP BY population, location
ORDER BY Percentpopulationinfected DESC

--Showing countries with highest death count per population

SELECT location, max(total_deaths) AS Totaldeathcount
FROM CovidDeaths
--WHERE location like '%states%'
WHERE continent is NOT NULL
GROUP BY  location
ORDER BY Totaldeathcount DESC

--LET'S BREAK THINGS DOWN BY CONTINENT
--Showing continents with highest death counts per population

SELECT location, max(total_deaths) AS Totaldeathcount
FROM CovidDeaths
--WHERE location like '%states%'
WHERE continent is NULL
GROUP BY location
ORDER BY Totaldeathcount DESC

SELECT continent, max(total_deaths) AS Totaldeathcount
FROM CovidDeaths
--WHERE location like '%states%'
WHERE continent is NOT NULL
GROUP BY continent
ORDER BY Totaldeathcount DESC

-- GLOBAL NUMBERS

SELECT date, sum(new_cases) AS Totalcases, sum(new_deaths) AS Totaldeaths,sum(new_deaths)/sum(new_cases)*100 AS Deathpercentage
FROM CovidDeaths
--WHERE location like '%states%'
WHERE continent is NOT NULL
GROUP BY date
ORDER BY 3, 2, 1

--Looking at total population vs vaccination

SELECT *
FROM CovidDeaths AS dea
JOIN CovidVaccinations AS vac
   ON dea.location = vac.location
   AND dea.date = vac.date

SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, sum(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) AS Rollingpeoplevaccinated
  FROM CovidDeaths AS dea
  JOIN CovidVaccinations AS vac
   ON dea.location = vac.location
   AND dea.date = vac.date
WHERE dea.continent is NOT NULL
 ORDER BY 2, 3

-- Using CTE to perform Calculation on Partition By in previous query

WITH PopvsVac_CTE(continent, location, date, population, new_vaccinations, Rollingpeoplevaccinated)
AS
(
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, sum(vac.new_vaccinations) OVER (PARTITION BY dea.location ORDER BY dea.location, 
  dea.date) AS Rollingpeoplevaccinated
--, (Rollingpeoplevaccinated/population)*100  
  FROM CovidDeaths AS dea
  JOIN CovidVaccinations AS vac
   ON dea.location = vac.location
   AND dea.date = vac.date
WHERE dea.continent is NOT NULL
 --ORDER BY 2,3

)
SELECT *, (Rollingpeoplevaccinated/population)*100
FROM PopvsVac_CTE

-- Using Temp Table to perform Calculation on Partition By in previous query

DROP Table if exists #PercentPopulationVaccinated

Create TEMP TABLE #PercentPopulationVaccinated

(

Continent TEXT,

Location TEXT),

Date INTEGER,

Population NUMERIC,

New_vaccinations NUMERIC,

RollingPeopleVaccinated NUMERIC

)

INSERT INTO #PercentPopulationVaccinated
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
, SUM(vac.new_vaccinations) OVER (PARTITION BY dea.Location ORDER BY dea.location, dea.Date) AS RollingPeopleVaccinated
--, (RollingPeopleVaccinated/population)*100
FROM CovidDeaths AS dea
JOIN CovidVaccinations AS vac
	On dea.location = vac.location
	and dea.date = vac.date
--where dea.continent is not null 
--order by 2,3

Select *, (RollingPeopleVaccinated/Population)*100
From #PercentPopulationVaccinated



-- Creating View to store data for later visualizations



CREATE VIEW PercentPopulationVaccinated as

SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations

, SUM(vac.new_vaccinations)) OVER (Partition by dea.Location Order by dea.location, dea.Date) as RollingPeopleVaccinated

--, (RollingPeopleVaccinated/population)*100

FROM CovidDeaths AS dea

JOIN CovidVaccinations AS vac

	On dea.location = vac.location

	and dea.date = vac.date

WHERE dea.continent is NOT NULL 
</sql><current_tab id="0"/></tab_sql></sqlb_project>
